function [OutImg] = convolve(I, F, str)
%function [OutImg] = convolve(I, F, iw, ih, fw, fh)

% This function performs convolution of gray scale image I with the filter
% F. 
% I is a gray scale image. This is a two dimensional array of size iw by ih. 
% F denotes a filter. This is a two dimensional array of floating point 
% numbers of size fw by fh. Usually ( fh, fw ) << ( ih, iw). The output 
% O(x, y) is an image of same size as I. The value of O at any pixel is 
% generated % by position F on I(x, y) such that the top right pixel of F 
% coincides with I(x, y), and then multiplying the values of I and F 
% for all the pixels of I covered by F, and finally summing these values.



% kCenterX = kCols / 2;
% kCenterY = kRows / 2;
% 
% for(i=0; i < rows; ++i)              // rows
% {
%     for(j=0; j < cols; ++j)          // columns
%     {
%         sum = 0;                     // init to 0 before sum
% 
%         for(m=0; m < kRows; ++m)     // kernel rows
%         {
%             mm = kRows - 1 - m;      // row index of flipped kernel
% 
%             for(n=0; n < kCols; ++n) // kernel columns
%             {
%                 nn = kCols - 1 - n;  // column index of flipped kernel
% 
%                 // index of input signal, used for checking boundary
%                 ii = i + (m - kCenterY);
%                 jj = j + (n - kCenterX);
% 
%                 // ignore input samples which are out of bound
%                 if( ii >= 0 && ii < rows && jj >= 0 && jj < cols )
%                 out[i][j] += in[ii][jj] * kernel[mm][nn];
%             }
%         }
%     }
% }


%compute the dimension of the images
if str
[ih, iw]=size(I);
[fh, fw]=size(F);
%The dimension of the convolution output O
%Ox=max(Ix+Fx-1, Ix, Fx);
%Oy=max(Iy+Fy-1, Iy, Fy);

OutImg=zeros(ih, iw);

for iy=1:ih  % image hight or rows
    for ix=1:iw  % image width or col
        pixelSum=0;
        
        fy = 1;
		fx = fw;
        
        for y=1:fh  % kernel hight or rows
            for x=1:fw % kernel width or columns
                        if(iy + y -1<= ih  && ix - x +1>=1) 
							pixelSum =pixelSum + I(iy+y-1, ix-x+1)*F(fy+y-1,fx-x+1);
                        end         
                               
            end
        end
        OutImg(iy,ix)=pixelSum;
    end
end 

end


